// Стандартна бібліотека С++. Асоціативні контейнери

// 16) Ввести вектор цілих чисел V. 
// Виконати групування елементів вектору V, 
// використовуючи у якості ключу груп останню (тобто праву) цифру елементу: 
// в одній групі повинні входити всі елементи Ѵ, що закінчуються однією цифрою (згруповані елементи повинні розташовуватися в тому же порядку, 
// в якому вони доступні у векторі). 
// Представити результат групування у вигляді відображення М. 
// Ключі яких є ключами групування, а значення - вектори, що містять згруповані елементи (таким чином, відображення М повинно мати тип 
// map <int, vector <int> >). 
// Вивести отримане відображення (для кожного елементу відображення М спочатку вивести ключ, двокрапку, а потім елементи пов'язаного з ним вектору через кому).


#include <iostream>
#include <vector>
#include <unordered_map>
#include <map>

int main() {
    // введення вектора цілих чисел V
    std::vector<int> V = {125, 3, 15, 22, 13, 105, 8, 43, 77, 28, 99};

    // unordered_map для групування
    std::unordered_map<int, std::vector<int>> M;
    // вектор для збереження порядку ключів
    std::vector<int> keys_order;

    // перебір елементів вектора V
    for (int num : V) {
        int last_digit = num % 10; // отримання останньої цифри числа
        if (M.find(last_digit) == M.end()) {
            // якщо ключ ще не зустрічався, додаємо його у порядок ключів
            keys_order.push_back(last_digit);
        }
        // додаємо число у відповідну групу
        M[last_digit].push_back(num);
    }

    std::cout << "Grouped elements in map:\n";
    for (int key : keys_order) { // прохід у порядку ключів
        std::cout << key << ": "; // виведення ключа
        for (size_t i = 0; i < M[key].size(); ++i) {
            std::cout << M[key][i]; // виведення числа
            if (i != M[key].size() - 1) std::cout << ", "; // розділення комами
        }
        std::cout << "\n";
    }

    return 0;
}